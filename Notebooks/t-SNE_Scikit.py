# ---
# jupyter:
#   jupytext:
#     formats: ipynb,py:light
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.7.1
#   kernelspec:
#     display_name: Manifold
#     language: python
#     name: manifold
# ---

# # t-SNE
#
# This notebook is desighned to observe and understand further the plots generated by the sklearn.manifold.TSNE function.
#
# Isabel Fernandez 5/10/2021

import os
import os.path as osp
import pandas as pd
import numpy as np
from sklearn.manifold  import TSNE
from sklearn.neighbors import kneighbors_graph
import scipy
from scipy.spatial.distance import correlation as dis_corr
from sklearn.metrics import pairwise_distances
from scipy.sparse import save_npz, load_npz
from sklearn.datasets import load_digits
import holoviews as hv
from holoviews.operation.datashader import rasterize
import panel as pn
import plotly.express as px
from holoviews import dim, opts
hv.extension('bokeh')
pn.extension('plotly')

# +
n_cpus = 26 # Number of cpus

PRJDIR = '/data/SFIMJGC/PRJ_Manifold_Learning' # Project directory path

port_tunnel = int(os.environ['PORT2']) # Get port tunnel for gui display
print('++ INFO: Second Port available: %d' % port_tunnel)
# -

# ***
# ## Load Digits Data

# Load number data and print dimensions
dig_data_df, num_df = load_digits(return_X_y=True,as_frame=True)
print('++ INFO: Digits data frame dimension ',dig_data_df.shape)

# ***
# ## Load Fashion Data

# +
# Load fashion data (test only)
fashion_path = os.path.join(PRJDIR,'Data','Fashion_Data') # Path to fashion data set

fash_test_img  = np.load(fashion_path+'/test_images.npy') # Load test images
fash_test_lab  = np.load(fashion_path+'/test_labels.npy') # Load test labels

fash_img_df = pd.DataFrame(fash_test_img.reshape((fash_test_img.shape[0], 784)))[0:1000] # Flatten image matricies and convert images array to pandas df
fash_lab_df = pd.DataFrame(fash_test_lab)[0:1000] # Convert lables array to pandas df

print('++ INFO: Digits data frame dimension ',fash_img_df.shape)
# -

# ***
# ## Load Widgets

p_list = [3,4,5,6,7,8,9,10,12,14,16,18,20,25,30,35,40,45,50,60,70,80,90,100,150,200,250,300]
Perplexity = pn.widgets.Select(name='Select Perplexity', options=p_list, value=p_list[0], width=200) # Select perplexity value (treat like k value in k-NN)

l_list = [10,20,30,40,50,60,70,80,90,100,150,200,250,300,350,400,450,500,600,700,800,900,1000]
LearningRate = pn.widgets.Select(name='Select Learning Rate', options=l_list, value=l_list[0], width=200) # Select learning rate


# ***
# ## Plotting Function

@pn.depends(Perplexity.param.value,LearningRate.param.value)
def TSNE_3D_plot(p,l):
    data_transformed = TSNE(n_components=3, perplexity=p, learning_rate=l).fit_transform(fash_img_df) # Apply TSNE to transform data to 3D
    
    plot_input = pd.DataFrame(data_transformed, columns=['x','y','z']) # Change data to pandas data frame
    plot_input['Label'] = fash_lab_df.astype(str) # Add column of number identifier with elements as type string
    
    # Created 3D scatter plot of embedded data and color by label
    plot = px.scatter_3d(plot_input, x='x', y='y', z='z', color='Label', width=700, height=600, opacity=0.7)
    plot = plot.update_traces(marker=dict(size=5,line=dict(width=0)), hovertemplate=["idx: "+str(x) for x in plot_input.index])
    
    return plot


dash = pn.Column(pn.Row(Perplexity,LearningRate),TSNE_3D_plot) # Create embedding dashboard

dash_server = dash.show(port=port_tunnel, open=False) # Run dashboard and create link

dash_server.stop() # Stop dashboard link
